diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
index 08a94f422fc800a031ef8d73d8ce0a30593c74cd..f65b5f3d49a520fd9b7d7a99e615078fadbdc1f2 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
@@ -32,7 +32,7 @@ public class BookmarkModel extends BookmarkBridge {
          * @param titles All titles of the bookmarks to be deleted.
          * @param isUndoable Whether the deletion is undoable.
          */
-        void onDeleteBookmarks(String[] titles, boolean isUndoable);
+        void onDeleteBookmarks(String[] titles, List<BookmarkItem> bookmarks, boolean isUndoable);
     }
 
     private ObserverList<BookmarkDeleteObserver> mDeleteObservers = new ObserverList<>();
@@ -75,6 +75,7 @@ public class BookmarkModel extends BookmarkBridge {
      */
     void deleteBookmarks(BookmarkId... bookmarks) {
         assert bookmarks != null && bookmarks.length > 0;
+        List<BookmarkItem> bookmarksItems = new ArrayList<BookmarkItem>();
         // Store all titles of bookmarks.
         List<String> titles = new ArrayList<>();
         boolean isUndoable = true;
@@ -85,12 +86,13 @@ public class BookmarkModel extends BookmarkBridge {
             if (bookmarkItem == null) continue;
             isUndoable &= (bookmarkId.getType() == BookmarkType.NORMAL);
             titles.add(bookmarkItem.getTitle());
+            bookmarksItems.add(bookmarkItem);bookmarksItems.addAll(BraveBookmarkWorker.GetChildren(bookmarkItem, this));
             deleteBookmark(bookmarkId);
         }
         endGroupingUndos();
 
         for (BookmarkDeleteObserver observer : mDeleteObservers) {
-            observer.onDeleteBookmarks(titles.toArray(new String[titles.size()]), isUndoable);
+            observer.onDeleteBookmarks(titles.toArray(new String[titles.size()]), bookmarksItems, isUndoable);
         }
     }
 
@@ -103,6 +105,7 @@ public class BookmarkModel extends BookmarkBridge {
         for (int i = 0; i < bookmarkIds.size(); ++i) {
             moveBookmark(bookmarkIds.get(i), newParentId, appendIndex + i);
         }
+        BraveBookmarkWorker.moveBookmarks(bookmarkIds, newParentId, this);
     }
 
     /**
